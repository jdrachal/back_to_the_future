// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/fs.proto

#ifndef PROTOBUF_INCLUDED_proto_2ffs_2eproto
#define PROTOBUF_INCLUDED_proto_2ffs_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2ffs_2eproto 

namespace protobuf_proto_2ffs_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2ffs_2eproto
namespace mypackage {
class Directory;
class DirectoryDefaultTypeInternal;
extern DirectoryDefaultTypeInternal _Directory_default_instance_;
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
}  // namespace mypackage
namespace google {
namespace protobuf {
template<> ::mypackage::Directory* Arena::CreateMaybeMessage<::mypackage::Directory>(Arena*);
template<> ::mypackage::File* Arena::CreateMaybeMessage<::mypackage::File>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mypackage {

// ===================================================================

class File : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mypackage.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(File* other);
  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return CreateMaybeMessage<File>(NULL);
  }

  File* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.mypackage.serialize_to_ostream) = true];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string data_filename = 2 [(.mypackage.serialize_to_ostream) = true];
  void clear_data_filename();
  static const int kDataFilenameFieldNumber = 2;
  const ::std::string& data_filename() const;
  void set_data_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_data_filename(::std::string&& value);
  #endif
  void set_data_filename(const char* value);
  void set_data_filename(const char* value, size_t size);
  ::std::string* mutable_data_filename();
  ::std::string* release_data_filename();
  void set_allocated_data_filename(::std::string* data_filename);

  // @@protoc_insertion_point(class_scope:mypackage.File)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_filename_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2ffs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Directory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mypackage.Directory) */ {
 public:
  Directory();
  virtual ~Directory();

  Directory(const Directory& from);

  inline Directory& operator=(const Directory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Directory(Directory&& from) noexcept
    : Directory() {
    *this = ::std::move(from);
  }

  inline Directory& operator=(Directory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Directory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Directory* internal_default_instance() {
    return reinterpret_cast<const Directory*>(
               &_Directory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Directory* other);
  friend void swap(Directory& a, Directory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Directory* New() const final {
    return CreateMaybeMessage<Directory>(NULL);
  }

  Directory* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Directory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Directory& from);
  void MergeFrom(const Directory& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Directory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mypackage.Directory directory = 2 [(.mypackage.serialize_to_ostream) = true];
  int directory_size() const;
  void clear_directory();
  static const int kDirectoryFieldNumber = 2;
  ::mypackage::Directory* mutable_directory(int index);
  ::google::protobuf::RepeatedPtrField< ::mypackage::Directory >*
      mutable_directory();
  const ::mypackage::Directory& directory(int index) const;
  ::mypackage::Directory* add_directory();
  const ::google::protobuf::RepeatedPtrField< ::mypackage::Directory >&
      directory() const;

  // repeated .mypackage.File file = 3 [(.mypackage.serialize_to_ostream) = true];
  int file_size() const;
  void clear_file();
  static const int kFileFieldNumber = 3;
  ::mypackage::File* mutable_file(int index);
  ::google::protobuf::RepeatedPtrField< ::mypackage::File >*
      mutable_file();
  const ::mypackage::File& file(int index) const;
  ::mypackage::File* add_file();
  const ::google::protobuf::RepeatedPtrField< ::mypackage::File >&
      file() const;

  // string name = 1 [(.mypackage.serialize_to_ostream) = true];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:mypackage.Directory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::mypackage::Directory > directory_;
  ::google::protobuf::RepeatedPtrField< ::mypackage::File > file_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2ffs_2eproto::TableStruct;
};
// ===================================================================

static const int kSerializeToOstreamFieldNumber = 60000;
extern ::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::FieldOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  serialize_to_ostream;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// File

// string name = 1 [(.mypackage.serialize_to_ostream) = true];
inline void File::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::name() const {
  // @@protoc_insertion_point(field_get:mypackage.File.name)
  return name_.GetNoArena();
}
inline void File::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mypackage.File.name)
}
#if LANG_CXX11
inline void File::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mypackage.File.name)
}
#endif
inline void File::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mypackage.File.name)
}
inline void File::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mypackage.File.name)
}
inline ::std::string* File::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mypackage.File.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_name() {
  // @@protoc_insertion_point(field_release:mypackage.File.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mypackage.File.name)
}

// string data_filename = 2 [(.mypackage.serialize_to_ostream) = true];
inline void File::clear_data_filename() {
  data_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::data_filename() const {
  // @@protoc_insertion_point(field_get:mypackage.File.data_filename)
  return data_filename_.GetNoArena();
}
inline void File::set_data_filename(const ::std::string& value) {
  
  data_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mypackage.File.data_filename)
}
#if LANG_CXX11
inline void File::set_data_filename(::std::string&& value) {
  
  data_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mypackage.File.data_filename)
}
#endif
inline void File::set_data_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mypackage.File.data_filename)
}
inline void File::set_data_filename(const char* value, size_t size) {
  
  data_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mypackage.File.data_filename)
}
inline ::std::string* File::mutable_data_filename() {
  
  // @@protoc_insertion_point(field_mutable:mypackage.File.data_filename)
  return data_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_data_filename() {
  // @@protoc_insertion_point(field_release:mypackage.File.data_filename)
  
  return data_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_data_filename(::std::string* data_filename) {
  if (data_filename != NULL) {
    
  } else {
    
  }
  data_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_filename);
  // @@protoc_insertion_point(field_set_allocated:mypackage.File.data_filename)
}

// -------------------------------------------------------------------

// Directory

// string name = 1 [(.mypackage.serialize_to_ostream) = true];
inline void Directory::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Directory::name() const {
  // @@protoc_insertion_point(field_get:mypackage.Directory.name)
  return name_.GetNoArena();
}
inline void Directory::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mypackage.Directory.name)
}
#if LANG_CXX11
inline void Directory::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mypackage.Directory.name)
}
#endif
inline void Directory::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mypackage.Directory.name)
}
inline void Directory::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mypackage.Directory.name)
}
inline ::std::string* Directory::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:mypackage.Directory.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Directory::release_name() {
  // @@protoc_insertion_point(field_release:mypackage.Directory.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Directory::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:mypackage.Directory.name)
}

// repeated .mypackage.Directory directory = 2 [(.mypackage.serialize_to_ostream) = true];
inline int Directory::directory_size() const {
  return directory_.size();
}
inline void Directory::clear_directory() {
  directory_.Clear();
}
inline ::mypackage::Directory* Directory::mutable_directory(int index) {
  // @@protoc_insertion_point(field_mutable:mypackage.Directory.directory)
  return directory_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mypackage::Directory >*
Directory::mutable_directory() {
  // @@protoc_insertion_point(field_mutable_list:mypackage.Directory.directory)
  return &directory_;
}
inline const ::mypackage::Directory& Directory::directory(int index) const {
  // @@protoc_insertion_point(field_get:mypackage.Directory.directory)
  return directory_.Get(index);
}
inline ::mypackage::Directory* Directory::add_directory() {
  // @@protoc_insertion_point(field_add:mypackage.Directory.directory)
  return directory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mypackage::Directory >&
Directory::directory() const {
  // @@protoc_insertion_point(field_list:mypackage.Directory.directory)
  return directory_;
}

// repeated .mypackage.File file = 3 [(.mypackage.serialize_to_ostream) = true];
inline int Directory::file_size() const {
  return file_.size();
}
inline void Directory::clear_file() {
  file_.Clear();
}
inline ::mypackage::File* Directory::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:mypackage.Directory.file)
  return file_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mypackage::File >*
Directory::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:mypackage.Directory.file)
  return &file_;
}
inline const ::mypackage::File& Directory::file(int index) const {
  // @@protoc_insertion_point(field_get:mypackage.Directory.file)
  return file_.Get(index);
}
inline ::mypackage::File* Directory::add_file() {
  // @@protoc_insertion_point(field_add:mypackage.Directory.file)
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mypackage::File >&
Directory::file() const {
  // @@protoc_insertion_point(field_list:mypackage.Directory.file)
  return file_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mypackage

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2ffs_2eproto
